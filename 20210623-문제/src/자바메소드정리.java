import java.util.Scanner;

/*
 * 메소드
 * 1) 한가지 작업만 수행하게 만든다 (재사용) (여러 작업 동시에 할 경우 재사용이 힘들다)
 * 2) 목적
 *    다른 클래스, 다른 프로젝트 제작시에 재사용성이 좋다
 *    프로그램의 가독성 (구분 => 쉽게 알아 볼 수 있게 만든다)
 *    	 	  =====
 *    		   뉴스, 줄거리 => 문단을 나눈다 (수정이 쉽게 만든다 : 유지보수) = 구조화
 *    		   구조화 :   함수 구조화 (c언어, 파이썬)
 *    				   클래스 구조화 (자바, C#)
 *    반복하는 코딩이 많을 경우
 * 3) 형식
 * 	  (접근지정어)   옵션     리턴형 메소드명(매개변수)
 *    =========   ====    =====
 *    public      static  기본데이터형(int, long, float, char, double, boolean)
 *    			  |		  배열(int[]... String[]...)
 *    			  |		  클래스
 *    			  |		  => 사용자가 요청한 기능에 대한 처리 결과값
 *    			  |		  => 메소드명
 *    			  |			 1. 알파벳, 한글로 시작한다 (알파벳-대소문자 구분)
 *    			  |				알파벳을 사용하는 것을 권장 (운영체제마다 한글처리가 틀리기 때문)
 * 				  |		        => 윈도우, 리눅스
 *                |          2. 숫자 사용이 가능 (뒤에 사용)
 *                |          3. 특수문자 => _, $ => _사용
 *                |          4. 키워드는 사용할 수 없다 (단 메소드명은 키워드가 아니다)   
 *                |          => 한개의 클래스내에서 같은 이름의 메소드명을 사용 할 수 있다
 *                              (단, 매개변수의 갯수나 데이터형이 달라야 한다)
 *                           => 약속 사항 : 소문자로 시작
 *                           
 *                        매개변수 : 갯수에 제한이 없다 (3개 이상은 가급적이면 배열, 클래스)
 *                        ====== 사용자가 전송한 값
 *                               메소드에서 사용하는 지역변수의 값을 다른 메소드로 전송
 *                                              ======
 *                                              {} => 메소드안에서 사용되는 변수, 매개변수
 *                                                ====> 메모리 공간(stack:메모리 자체 관리)
 *                                                ====> 프로그래머 공간 => Heap(new 연산자를 사용)
 *                        => 가독성, 속도성
 *                        => 결과값이 없다, 메소드 자체에서 처리 => void
 *                           void => return 생략 할 수 있다
 *                           
 *                        형식)
 *                             리턴형 메소드명(매개변수...)
 *                             ====================== ({}전) 선언, 원형
 *                             {
 *                             		구현부
 *                             		return 값; => 리턴형의 데이터형과 반드시 일치해야한다
 *                             }
 *                             예)
 *                             double display()
 *                             {
 *                             		return 10.5;
 *                             			   =====
 *                             }
 *                             
 *                             int display()
 *                             ===
 *                             {
 *                             		return 10;
 *                             			   ==
 *                             }
 *                             int[] display()
 *                             {
 *                             		return 배열명;
 *                             }
 *                             
 *                             void display()
 *                             {
 *                             		return; // 생략이 가능 (생략시에는 컴파일러가 자동 첨부)
 *                             }
 *                             
 *                             ==> 중요한 것은 여러번 호출이 가능
 *                                 오라클 연결
 *                                 연결 => SQL수행 => 닫기
 *                                 ===              ===
 *                                 
 *                          
 *                             
 *                             
 * 3) 형식
 * 	  (접근지정어)    옵션     리턴형 메소드명(매개변수)                           
 *    public       static                   
 *    private      >> 저장, 공유, final, abstract  
 *    protected
 *    default : 같은 폴더에서만 접근이 가능
 */
public class 자바메소드정리 {
	static int input(String s) {
		Scanner scan = new Scanner(System.in);
		System.out.print(s+"입력:");
		return scan.nextInt();
	}
	public static void main(String[] args) {

	}
}
